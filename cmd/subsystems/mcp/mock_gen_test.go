// Code generated by mocktail; DO NOT EDIT.

package mcp

import (
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// pineappleMock mock of Pineapple.
type pineappleMock struct{ mock.Mock }

// newPineappleMock creates a new pineappleMock.
func newPineappleMock(tb testing.TB) *pineappleMock {
	tb.Helper()

	m := &pineappleMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *pineappleMock) Juice(aParam string, bParam Water) Water {
	_ret := _m.Called(aParam, bParam)

	if _rf, ok := _ret.Get(0).(func(string, Water) Water); ok {
		return _rf(aParam, bParam)
	}

	_ra0, _ := _ret.Get(0).(Water)

	return _ra0
}

func (_m *pineappleMock) OnJuice(aParam string, bParam Water) *pineappleJuiceCall {
	return &pineappleJuiceCall{Call: _m.Mock.On("Juice", aParam, bParam), Parent: _m}
}

func (_m *pineappleMock) OnJuiceRaw(aParam interface{}, bParam interface{}) *pineappleJuiceCall {
	return &pineappleJuiceCall{Call: _m.Mock.On("Juice", aParam, bParam), Parent: _m}
}

type pineappleJuiceCall struct {
	*mock.Call
	Parent *pineappleMock
}

func (_c *pineappleJuiceCall) Panic(msg string) *pineappleJuiceCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *pineappleJuiceCall) Once() *pineappleJuiceCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *pineappleJuiceCall) Twice() *pineappleJuiceCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *pineappleJuiceCall) Times(i int) *pineappleJuiceCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *pineappleJuiceCall) WaitUntil(w <-chan time.Time) *pineappleJuiceCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *pineappleJuiceCall) After(d time.Duration) *pineappleJuiceCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *pineappleJuiceCall) Run(fn func(args mock.Arguments)) *pineappleJuiceCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *pineappleJuiceCall) Maybe() *pineappleJuiceCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *pineappleJuiceCall) TypedReturns(a Water) *pineappleJuiceCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *pineappleJuiceCall) ReturnsFn(fn func(string, Water) Water) *pineappleJuiceCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *pineappleJuiceCall) TypedRun(fn func(string, Water)) *pineappleJuiceCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam := args.String(0)
		_bParam, _ := args.Get(1).(Water)
		fn(_aParam, _bParam)
	})
	return _c
}

func (_c *pineappleJuiceCall) OnJuice(aParam string, bParam Water) *pineappleJuiceCall {
	return _c.Parent.OnJuice(aParam, bParam)
}

func (_c *pineappleJuiceCall) OnJuiceRaw(aParam interface{}, bParam interface{}) *pineappleJuiceCall {
	return _c.Parent.OnJuiceRaw(aParam, bParam)
}
